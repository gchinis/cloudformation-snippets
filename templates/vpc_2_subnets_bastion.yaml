AWSTemplateFormatVersion: 2010-09-09
Description: >-
  VPC with two public subnets and bastion host. The outputs of this stack
  include: the two subnets IDs that can be used by autoscaling groups and load
  balancers, a Security Group that allows traffic to flow within the VPC, and a
  Security Group that allows traffic to from the 'trusted network' 
Parameters:
  BastionAmi:
    Type: 'AWS::EC2::Image::Id'
    Description: Image Id
  BastionKeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Key Name
  VpcCidrBlock:
    Type: String
    Description: IP address space for the VPC e.g. 10.0.0.0/16
  SubnetCidrBlocks:
    Type: CommaDelimitedList
    Description: >-
      Comma delimited list of TWO elements with the IP address space of the
      subnets. MUST fall within the address space of the VPC e.g
      10.0.0.0/24,10.0.1.0/24
  BastionIpAddress:
    Type: String
    Description: >-
      Private IP Address. MUST fall within the address space of one of the
      Subnets e.g. 10.0.1.34
  BastionInstanceType:
    Type: String
    Description: Instance Instance Type
  TrustedNetwork:
    Type: String
    Description: >-
      IP address space of your trusted network. Connections from that network
      can ssh into the bastion. Also used to create the TrustedSecurityGroup
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Information
        Parameters:
          - VpcCidrBlock
          - SubnetCidrBlocks
          - TrustedNetwork
      - Label:
          default: Bastion Host
        Parameters:
          - BastionAmi
          - BastionKeyName
          - BastionIpAddress
          - BastionInstanceType
    ParameterLabels:
      BastionAmi:
        default: Image id
      BastionKeyName:
        default: SSH key name
      BastionIpAddress:
        default: Private IP Address
      BastionInstanceType:
        default: Instance type
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackId'
  Subnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      CidrBlock: !Select 
        - 0
        - !Ref SubnetCidrBlocks
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackId'
  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      CidrBlock: !Select 
        - 1
        - !Ref SubnetCidrBlocks
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackId'
  BastionEni:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Tags:
        - Key: Name
          Value: Bastion
      Description: Bastion ENI
      SubnetId: !Ref Subnet0
      PrivateIpAddress: !Ref BastionIpAddress
      GroupSet:
        - !Ref InternalSecurityGroup
        - !Ref TrustedSecurityGroup
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref BastionAmi
      KeyName: !Ref BastionKeyName
      InstanceType: !Ref BastionInstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref BastionEni
          DeviceIndex: '0'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: 'true'
      Tags:
        - Key: Name
          Value: Bastion
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet0RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet0
      RouteTableId: !Ref RouteTable
  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  TrustedSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http and ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref TrustedNetwork
      VpcId: !Ref VPC
  InternalSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http and ssh
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !GetAtt 
            - VPC
            - CidrBlock
      VpcId: !Ref VPC
Outputs:
  VpcId:
    Description: VPC
    Value: !Ref VPC
  Subnet0:
    Description: Subnet0
    Value: !Ref Subnet0
  Subnet1:
    Description: Subnet1
    Value: !Ref Subnet1
  InternalSecurityGroup:
    Description: InternalSecurityGroup
    Value: !Ref InternalSecurityGroup
  TrustedSecurityGroup:
    Description: TrustedSecurityGroup
    Value: !Ref TrustedSecurityGroup
